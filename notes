make CXX='cc_args.py g++-4.8'



// Works since: because the C++ language standard (ISO/IEC 14882:2003)
// specifies that destructors of local objects are called in the reverse
// order of their constructors.
QWidget window;
QPushButton quit("Quit", &window);

QIODevice emits readyRead() when new data is available for reading; for
example, if new data has arrived on the network or if additional data is
appended to a file that you are reading from.

QProcess gzip;
gzip.start("gzip", QStringList() << "-c");
if (!gzip.waitForStarted())
    return false;
gzip.write("uncompressed data");
QByteArray compressed;
while (gzip.waitForReadyRead())
    compressed += gzip.readAll();


QFile file("out.txt");
if (!file.open(QIODevice::WriteOnly | QIODevice::Text))
    return;
QTextStream out(&file);
out << "The magic number is: " << 49 << "\n";


When you use QFile, QFileInfo, and QDir to access the file system with Qt, you
can use Unicode file names. On Unix, these file names are converted to an 8-bit
encoding. If you want to use standard C++ APIs (<cstdio> or <iostream>) or
platform-specific APIs to access files instead of QFile, you can use the
encodeName() and decodeName() functions to convert between Unicode file names
and 8-bit file names.

at() can be faster than operator[](), because it never causes a deep
copy to occur.

As a special case, a QTimer with a timeout of 0 will time out as soon as
all the events in the window system's event queue have been processed.
This can be used to do heavy work while providing a snappy user
interface.

When implementing your own implicitly shared classes, use the
QSharedData and QSharedDataPointer classes.


## Debug
cout << "Connected to: " << url.toString().toStdString() << endl;

If you include <QtDebug>, a more convenient syntax is also available.
It automatically puts a single space between each item, and outputs
a newline at the end. It supports many C++ and Qt types.

To suppress the output at run-time, install your own message handler
with qInstallMessageHandler().

qthelp://org.qt-project.qtdoc.521/qtdoc/debug.html

The debugging functions QObject::dumpObjectTree() and
QObject::dumpObjectInfo() are often useful when an application looks or
acts strangely.

qDebug ("Found %d items", cnt);
qDebug() << "Connected to" << url;


# QtGlobal

Several convenience type definitions are declared: qreal for double,
uchar for unsigned char, uint for unsigned int, ulong for unsigned long
and ushort for unsigned short.

qBound (minValue, value, maxValue);

Q_CHECK_PTR() macro prints a warning containing the source code's file
name and line number, saying that the program ran out of memory, if the
pointer is 0.

qPrintable()

QT_POINTER_SIZE
QT_VERSION
QT_VERSION_STR
qVersion()

qFuzzyCompare	// note: p1 or p2 can not be 0.0!

qSetMessagePattern // Changes the output of the default message handler

QT_REQUIRE_VERSION(argc, argv, "4.0.2")

#if (QT_VERSION >= QT_VERSION_CHECK(5, 0, 0))

Q_ASSUME(bool expr)
Q_LIKELY()
Q_UNREACHABLE()

Q_BYTE_ORDER	Q_BIG_ENDIAN | Q_LITTLE_ENDIAN

Q_CC_GNU

Q_FUNC_INFO

Q_OS_ANDROID

Q_PROCESSOR_X86, Q_PROCESSOR_X86_32, Q_PROCESSOR_X86_64

Q_UNUSED( name)

QT_NO_DEBUG_OUTPUT
QT_NO_WARNING_OUTPUT
QT_FATAL_WARNINGS

qPrintable(const QString &str)	// str.toLocal8Bit().constData()



## Miscellaneous

By subclassing QIODevice, you can provide the same interface to your own
I/O devices. Subclasses of QIODevice are only required to implement the
protected readData() and writeData() functions.


